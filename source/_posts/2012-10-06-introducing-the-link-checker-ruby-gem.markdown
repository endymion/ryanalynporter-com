---
layout: post
title: "Introducing the link-checker Ruby gem"
description: Quickly and painlessly check your web links with Ruby, Nokogiri and Anemone
date: 2012-10-06 16:10
comments: true
categories: [Ruby, Nokogiri, Anemone, Octopress, Jekyll, RSpec]
---

_{{ page.description }}_

{% img /images/posts/link-checker/terminal-screen-shot.png %}

When I started using [Octopress](http://octopress.org) to build web sites, I was a little surprised to find that there aren't a lot of pure Ruby tools for checking links.  I want to check the links in new pages before I publish them, and I want to be able to check the links on the entire site so that I can fix dead links as time goes on.  And I want to do it with Ruby on my machine, not against a live server with a Mac app or a Windows app or something.  That's just the Octopress way.

It didn't take long to make a Ruby script to find the HTML files in the 'public' folder of my Octopress site, find the links in each file using [Nokogiri](http://nokogiri.org), and check each link.  I set it up to display passing results in green, errors from bad links in red, and warnings about redirects in yellow.  I set it up to spawn a thread for each file and check them simultaneously, instead of (slowly) checking each HTML file in sequence.  That's pretty much all that I needed for my Octopress sites.

But this seems like something that other people might want to do, so I took the extra time to make the tool more generalized so that it can be used with any web site generated by [Jekyll](https://github.com/mojombo/jekyll) or any other kind of static HTML generator, not just Octopress.

And maybe you might want to check the links on a live web server, not static HTML files on your development machine.  So I added a web crawling feature using [Anemone](http://anemone.rubyforge.org) so that you can target the URL of a live site instead of a file path.  I want these features to be solid and reliable over time, so I built all of it with [RSpec](http://rspec.info) testing and confirmed 100% test coverage using [SimpleCov](https://github.com/colszowka/simplecov).  And you might not agree with my idea of sensible defaults, so I added a couple of command-line parameters for controlling warnings and errors.  The [link-checker](https://github.com/endymion/link-checker) gem is pure Ruby and you can [get it from RubyGems](https://rubygems.org/gems/link-checker).

### Installation

To use the link-checker gem in a Ruby project, just add the gem to your Gemfile:

{% codeblock "Gemfile" lang:ruby %}
gem 'link-checker'
{% endcodeblock %}

Then run ```bundle install```, and you'll have a new command, ```check-links```.

### Usage

Just give it the target that you want it to scan.  For example, if you have an Octopress site then your output HTML is in the ```public``` directory, so call it with:

    check-links 'public'

Or if you want to check the links on a live site, then give it a URL instead:

    check-links 'http://www.ryanalynporter.com'

If you don't pass any target, then the default is to scan the "./" directory.  If you have a Jekyll site that you deploy to GitHub Pages, then you can check the links with just:

    check-links

### Return value

The ```check-links``` command will return success if there are no errors, and it will return an error if it detects broken links.  So you can use the return value to make decisions on the command line.  For example:

{% img /images/posts/link-checker/terminal-screen-shot-return-value.png %}

### Parameters

I like to see yellow warnings for links that redirect to other valid URLs.  You might find that irritating, and you might just want to see green or red.  So just add the ```--no-warnings``` parameter, and you won't get any yellow warnings.

    check-links 'public' --no-warnings

Instead of the yellow warnings from the first screen shot above, you'll only see green.  (Or red.)

{% img /images/posts/link-checker/terminal-screen-shot-no-warnings.png %}

Or maybe you do care about redirects.  Maybe you want redirects to be considered errors, so that the ```check-links``` command will return an error on the command line if it finds any redirects.  Just pass the parameter ```--warnings-are-errors```.

{% img /images/posts/link-checker/terminal-screen-shot-warnings-are-errors.png %}

### License

[It's yours](https://github.com/endymion/link-checker/blob/master/LICENSE.txt), do what you want with it.  Enjoy.

### Contributing

The link-checker gem is an open-source project and I welcome any comments, GitHub issues, or most of all pull requests.
